<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[

<!DOCTYPE html>

<html lang="en-us">
<head>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/centerclassroom/ola@main/style.css"/>
<!-- Yandex Games SDK -->
<style>
        /* Убираем выделение по нажатию клавиш */
        canvas:focus {
            outline: none;
        }

        html, body {
            /* Убираем отступы */
            padding: 0;
            margin: 0;
            /* Отключаем скролл и лонгтап на IOS */
            overflow: hidden;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            /* Ставим высоту на 100% */
            height: 100%;
        }
    </style>
<!-- Additional head modules -->
</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas" tabindex="-1"></canvas>
</div>
<div id="loading-cover" style="display:none;">
<div id="unity-loading-bar">
<div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/centerclassroom/ola@main/logo.png"/></div>
<div id="unity-progress-bar-empty" style="display: none;">
<div id="unity-progress-bar-full"></div>
</div>
<div class="spinner"></div>
</div>
</div>
<!-- Additional body modules -->
<!DOCTYPE html>
<html lang="en-us">
<head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Unity WebGL Player | 99Days</title>
    <style>
        /* CSS stilleri (orijinal kodunuzdan alınabilir, burada yer kaplamaması için çıkarılmıştır) */
    </style>
</head>
<body>
    <div id="unity-container" class="unity-desktop">
        <canvas id="unity-canvas"></canvas>
        <div id="loading-cover">
            <div id="unity-progress-bar-empty">
                <div id="unity-progress-bar-full"></div>
            </div>
            <div class="spinner"></div>
        </div>
    </div>
    <script>
        const hideFullScreenButton = "";
        const buildUrl = "https://cdn.jsdelivr.net/gh/centerclassroom/ola@main/Build";
        const loaderUrl = buildUrl + "/Build.loader.js";
        const cdnBaseUrl = "https://cdn.jsdelivr.net/gh/centerclassroom/ola@main/"; // jsDelivr URL'sini kendi reponuza göre düzenleyin

        // Part dosyalarının listesi
        const dataParts = [
            cdnBaseUrl + "Build.data.br.part0",
            cdnBaseUrl + "Build.data.br.part1",
            cdnBaseUrl + "Build.data.br.part2",
            cdnBaseUrl + "Build.data.br.part3"
        ];
        const wasmParts = [
            cdnBaseUrl + "Build.wasm.br.part0",
            cdnBaseUrl + "Build.wasm.br.part1",
            cdnBaseUrl + "Build.wasm.br.part2",
            cdnBaseUrl + "Build.wasm.br.part3",
            cdnBaseUrl + "Build.wasm.br.part4"
        ];

        // Dosya birleştirme fonksiyonu
        async function fetchAndCombineParts(partUrls) {
            const buffers = [];
            for (const url of partUrls) {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`Failed to fetch ${url}`);
                const buffer = await response.arrayBuffer();
                buffers.push(buffer);
            }
            const totalLength = buffers.reduce((sum, buf) => sum + buf.byteLength, 0);
            const combined = new Uint8Array(totalLength);
            let offset = 0;
            for (const buffer of buffers) {
                combined.set(new Uint8Array(buffer), offset);
                offset += buffer.byteLength;
            }
            return new Blob([combined], { type: 'application/octet-stream' });
        }

        // Unity konfigürasyonu
        const config = {
            dataUrl: "", // Blob URL dinamik olarak ayarlanacak
            frameworkUrl: buildUrl + "/Build.framework.js",
            codeUrl: "", // Blob URL dinamik olarak ayarlanacak
            streamingAssetsUrl: "StreamingAssets",
            companyName: "DefaultCompany",
            productName: "99Days",
            productVersion: "0.1"
        };

        const container = document.querySelector("#unity-container");
        const canvas = document.querySelector("#unity-canvas");
        const loadingCover = document.querySelector("#loading-cover");
        const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
        const progressBarFull = document.querySelector("#unity-progress-bar-full");
        const spinner = document.querySelector('.spinner');

        const canFullscreen = (function () {
            for (const key of [
                'exitFullscreen',
                'webkitExitFullscreen',
                'webkitCancelFullScreen',
                'mozCancelFullScreen',
                'msExitFullscreen',
            ]) {
                if (key in document) {
                    return true;
                }
            }
            return false;
        }());

        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            container.className = "unity-mobile";
        }

        loadingCover.style.background = "url('https://cdn.jsdelivr.net/gh/centerclassroom/ola@main/background.jpg') center / cover";
        loadingCover.style.display = "";

        document.addEventListener('contextmenu', event => event.preventDefault());

        function FocusGame() {
            window.focus();
            canvas.focus();
        }

        function auth() {
            initPlayer();
        }

        window.addEventListener('pointerdown', FocusGame);
        window.addEventListener('touchstart', FocusGame);

        let StartUnityInstance;
        let myGameInstance;
        let ysdk = null;

        let environmentData = {
            language: "en",
            domain: "default_domain",
            deviceType: "desktop",
            isMobile: false,
            isDesktop: true,
            isTablet: false,
            isTV: false,
            appID: "default_app_id",
            browserLang: navigator.language || "en",
            payload: null,
            promptCanShow: false,
            reviewCanShow: false,
            platform: navigator.platform,
            browser: (function() {
                let userAgent = navigator.userAgent;
                if (userAgent.includes("YaBrowser")) return "Yandex";
                if (userAgent.includes("OPR") || userAgent.includes("Opera")) return "Opera";
                if (userAgent.includes("Firefox")) return "Firefox";
                if (userAgent.includes("MSIE") || userAgent.includes("Trident")) return "IE";
                if (userAgent.includes("Edge")) return "Edge";
                if (userAgent.includes("Chrome")) return "Chrome";
                if (userAgent.includes("Safari")) return "Safari";
                return "Other";
            })()
        };

        let cloudSaves = 'noData';
        let paymentsData = 'none';
        let playerData = 'noData';
        let player = null;
        let payments = null;
        let initGame = false;
        let nowFullAdOpen = false;

        function GetPayments() { console.warn("GetPayments is not implemented"); return Promise.resolve("none"); }
        function SaveCloud() { console.warn("SaveCloud is not implemented"); }
        function LoadCloud() { console.warn("LoadCloud is not implemented"); return Promise.resolve("noData"); }
        function InitLeaderboard() { console.warn("InitPlayer is not implemented"); return Promise.resolve("noData"); }

        function RewardedShow(id) {
            try {
                myGameInstance.SendMessage("YandexGame", "OpenVideo", id);
                setTimeout(() => {
                    myGameInstance.SendMessage("YandexGame", "CloseVideo");
                    FocusGame();
                }, 500);
            } catch (error) {
                console.error("Rewarded Ad Error:", error.message);
            }
        }

        function FullAdShow() {
            if (!nowFullAdOpen && initGame) {
                nowFullAdOpen = true;
                myGameInstance.SendMessage("YandexGame", "OpenFullAd");
                setTimeout(() => {
                    nowFullAdOpen = false;
                    myGameInstance.SendMessage("YandexGame", "CloseFullAd", "true");
                    FocusGame();
                }, 500);
            }
        }

        function StickyAdActivity() { console.warn("StickyAdActivity is not implemented"); }
        function Review() { console.warn("Review is not implemented"); }
        function PromptShow() { console.warn("PromptShow is not implemented"); }
        function InitLeaderboards() { console.warn("InitLeaderboards is not implemented"); }
        function GetLeaderboardScores() { console.warn("GetLeaderboardScores is not implemented"); }
        function SetLeaderboardScores() { console.warn("SetLeaderboardScores is not implemented"); }
        function ConsumePurchase() { console.warn("ConsumePurchase is not implemented"); }
        function ConsumePurchases() { console.warn("ConsumePurchases is not implemented"); }

        // Unity başlatma ve dosya birleştirme
        try {
            const script = document.createElement("script");
            script.src = loaderUrl;
            script.onload = async () => {
                // Part dosyalarını birleştir
                const dataBlob = await fetchAndCombineParts(dataParts);
                const wasmBlob = await fetchAndCombineParts(wasmParts);
                config.dataUrl = URL.createObjectURL(dataBlob);
                config.codeUrl = URL.createObjectURL(wasmBlob);

                StartUnityInstance = function () {
                    createUnityInstance(canvas, config, (progress) => {
                        spinner.style.display = "none";
                        progressBarEmpty.style.display = "";
                        progressBarFull.style.width = `${100 * progress}%`;
                    }).then((unityInstance) => {
                        myGameInstance = unityInstance;
                        loadingCover.style.display = "none";
                    }).catch((message) => {
                        console.error("Unity yükleme hatası:", message);
                    });
                };
                StartUnityInstance();
            };
            document.body.appendChild(script);
        } catch (error) {
            console.error("Başlatma sırasında hata:", error);
        }

        function InitGame() {
            try {
                console.log('Init Game Success');
                initGame = true;
                if (nowFullAdOpen === true && myGameInstance != null) {
                    myGameInstance.SendMessage('YandexGame', 'OpenFullAd');
                }
            } catch (error) {
                console.error("InitGame sırasında hata:", error);
            }
        }

        window.addEventListener("unhandledrejection", function(event) {
            console.warn("Hata es geçildi:", event.reason);
            event.preventDefault();
        });
    </script>
</body>
</html>
</body>
</html>

]]></Content>
</Module>